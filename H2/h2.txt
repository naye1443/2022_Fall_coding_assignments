COP4331 Homework 2

Instructor: Dr. Ionut Cardei


*** no homeworks will be accepted after the due date ***



Preparation/Delivery Instructions:

   1. Write all your answers, in the order given in the homework file, in ONE PDF file.
      (You could edit a Word document and then convert it to PDF.)
      Follow this format:
      Write your name followed by the section number (e.g. COP4331 003).
      List the answers in order: 1,2,3,...

      For each problem write as a heading the problem number (e.g. "4.1"). 
      The problem number must be clearly readable before the problem solution. 
      Java source files must be properly identified: write the file name as a heading, 
      followed by the file content.

      Make sure Java code and UML diagrams are readable.
      Proper indentation and code formatting are required.
      Nice color syntax highlighting is not required, but appreciated by the graders.
      Good option: http://hilite.me
      
   2. Upload the PDF file to Canvas.

   3. Upload your source .java files to Canvas.
   
   4. Do **not** include files generated by javadoc in your submission.
      Upload only the pdf/doc file with all solutions. 
   
   5. For full credit, your designs and code must follow the course guidelines and must compile without 
		warnings and work correctly, as required in the problem description. 

Remider: it is academic misconduct to submit work that is not yours.
Do not paste code taken from the web. Only code part of the solution will be graded.
You may use any helpful code from the textbook for your answers.


In addition:
- use an UML modeling tool or Violet
- do not split a diagram across page boundaries -- a diagram must be on one page only.
- for each problem write analysis, design, and implementation outcomes - as required - in this order.
  For instance, do not interleave use cases with Java code.


**** Note that using the right format and syntax for the diagrams is very important.
Diagram format (i.e. notation/syntax) mistakes are penalized.
To be safe, ensure that your diagrams have the same syntactic (i.e. visual syntax)
elements as the diagrams from the course & textbook. ****

Only the last submission before the deadline will be graded.

================================================================================================

Homework problems:


2.1
Consider the voice mail application presented in Chapter 2. 
A new requirement is added to the system: 

A mailbox owner can erase all messages in the queue from a specific phone number without having 
to listen to any of them. 
The mailbox owner would enter the sender's phone number on the phone keypad 
and the system will delete all messages sent from that phone.

(information not relevant for this question: assume the caller ID is available for all incoming messages)

a. Write the use case for this new feature. Add also one variant for an unsuccessful scenario. 
Make these scenarios integrate nicely with the other voice mail system use cases.

b. Write the sequence diagrams for the 2 new scenarios. (see pages 72-73)




2.2
An online bank application provides customers with three types of accounts: checking, savings,
and credit. The credit account is tied to the credit card issued by the bank.
The bank supports the following transactions involving accounts belonging to the same
customer: withdrawal, transfer, deposit. A transfer transaction involves 2 accounts.
A customer has an address.

Draw a UML class diagram that shows the relations between these classes:
	Account
	CreditAccount
	SavingsAccount
	CheckingAccount
	Bank
	Address
	CreditCard
	Customer



2.3
Consider an online rental car reservation system that works with multiple rental companies
in the same way one can reserve a car at expedia.com with Hertz, Alamo, etc.
Consider the following use case:

UC1. Customer makes reservation
1. The customer logs in the system.
2. The customer selects a start day and an end date/time, pickup and drop-off locations.
3. The system displays a list of cars for the above parameters.
4. The customer selects a car from the list of available cars.
5. The customer enters the name, address, and driver age for this reservation.
6. The system checks car availability with the car rental company using the company's own reservation system.
7. The rental company confirms car availability.
8. The system confirms the reservation to the customer, showing the reservation details.
9. The system sends the confirmed reservation to the rental company.
(payment is not addressed in this scenario intentionally)

Do these tasks in the given  order:
a. Identify classes, responsibilities, and collaborators. Write CRC cards. 
b. Write the UML class diagram for this system. 
   Specify multiplicity, directionality and role names for associations. 
   Add attributes and operations.
c. Write the sequence diagram for this scenario.
d. Write the state diagram for the class that handles the interaction system-customer

Do not design any features/functions that are not specified in this problem 
(no credit for extra features). 




2.4
Design and implement an application that simulates a cash register. 
Base your design on the following informal scenario:

A cashier uses a scanner to enter the Universal Product Code (UPC) for products bought. 
The cash register will then display the UPC, product name and unit price. 
After the last product is scanned, the cashier presses the "Pay" button. 
The cash register displays the total. The buyer hands over cash and the cash register 
displays the receipt on the screen (item name, UPC, and price for each, followed by the total price).
To simulate this application, the user will enter the UPCs on the terminal (use a Scanner object).
Output from the cash register is displayed on the terminal, using the System.out object. 
Design classes that match the real-world objects (e.g. UPCScanner).

Follow the OO design process: identify classes, write CRC cards, UML class diagrams, 
sequence diagrams, state diagrams. Implement in Java and test your code. 
Hardcode several default products in a product inventory (e.g. prod: "Snickers bar", 
UPC: 101, Unit price: $1). Assume an infinite supply of products. 
Do not design/implement any features/functions that are not specified in this problem 
(no credit for extra features). 
Comment your code, so the grader knows what is going on. Also add Javadoc comments.

Deliverables:

    * CRC diagrams (bulleted list is acceptable)
    * UML class diagrams, sequence diagrams, and state diagram for the class handling the 
       cashier-system interaction
    * Java code 

Paste in the Word doc or pdf file the CRC info, UML diagrams (exported to png from violet) 
and all your code. 


2.5
You develop a new social networking web application called ChainedIn (TM) that is used 
by professionals, job seekers, and recruiters. (think LinkedIn)
A user (call it X) can log in the system, after which the user can:
- edit X's profile, that includes name, education, and work history (i.e. current and prior jobs).
  Education consists of a list of schools (just their name) the user attended. 
  A job's description includes just  the  company name.
- post an update on X's own blog (like posting on the Facebook wall)
- read posts written by all of user X's social network members

(The following is just an explanation: by "social network" we mean a set of other users that X 'knows'
and that accepted to be in X's network via invitation/confirmation. For this problem we assume a user's social 
network is already known/set/stored and we don't worry about managing it or about the invitation system.)

Do the following:

a. Write use cases "Read Recent Posts", "Edit Profile", "Write Post". Follow the format taught in class.
b. Based on the features above and the use cases, identify classes, responsibilities (operations), 
   and relationships between classes.
c. Write the UML class diagram (or diagrams, if it helps having more than one). The diagram(s) must
   show class names, attributes with type, and methods.
d. Write the UML sequence diagrams for the three use cases listed at point a. 
   ("Read Recent Posts", "Edit Profile", "Write Post")



===================================================================================================
